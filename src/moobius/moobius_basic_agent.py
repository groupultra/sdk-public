import asyncio
import json
import traceback
import aioprocessing

from moobius.basic.ws_client import WSClient
from moobius.basic.ws_message_builder import WSMessageBuilder
from moobius.basic.http_api_wrapper import HTTPAPIWrapper

class MoobiusBasicAgent:
    def __init__(self, http_server_uri="", ws_server_uri="", service_id="", email="", password="", **kwargs):
        self.http_api = HTTPAPIWrapper(http_server_uri)
        self._ws_client = WSClient(ws_server_uri, handle=self.handle_received_message)
        self._ws_message_builder = WSMessageBuilder()

        self._email = email
        self._password = password

        self._access_token = ""
        self._refresh_token = ""
        self.service_id = service_id
        self.loop = None

    def create_task(self, coro):
        self.loop.create_task(coro)
        
    def start(self, bind_to_channels=None):
        process_forever = aioprocessing.AioProcess(target=self.main, args=(bind_to_channels))
        process_forever.start()
        
    def main(self, bind_to_channels=None):
        # Authenticate and get access_token
        self._access_token, self._refresh_token = self.http_api.authenticate(self._email, self._password)
        
        self.loop = asyncio.get_event_loop()
        # Connect to websocket server
        self.loop.run_until_complete(self._ws_client.connect())
        # if no service_id is passed, create a new service
        self.service_id = self.service_id or self.http_api.create_service(description="Generated by MoobiusBasicAgent")
        self.loop.run_until_complete(self.send_service_login())
        if bind_to_channels:
            for channel_id in bind_to_channels:
                self.http_api.bind_service_to_channel(self.service_id, channel_id)
        else:
            pass
        self.loop.run_until_complete(self.on_start())
        
        self.create_task(self.send_heartbeat())
        self.create_task(self._ws_client.pipe_receive())
        # self.create_task(self._websocket_on_receive())
        # self.create_task(self._pipe_on_receive())
        # self.create_task(self.sleep_and_send(self.ws))
        # self.loop.create_task(self.ws_recv())
        # self.loop.create_task(self.pipe_recv())
        # self.loop.create_task(self.sleep_and_send(self.ws))
        self.loop.run_forever()
        
        # Authenticate and get access_token
        # self._access_token, self._refresh_token = self.http_api.authenticate(self._email, self._password)
        # print(self.http_api.get_service_list())

        # Connect to websocket server
        # await self._ws_client.connect()

        # if no service_id is passed, create a new service
        # self.service_id = self.service_id or self.http_api.create_service(description="Generated by MoobiusBasicAgent")
        
        # await self.send_service_login()

        # if bind_to_channels:
        #     for channel_id in bind_to_channels:
        #         self.http_api.bind_service_to_channel(self.service_id, channel_id)
        # else:
        #     pass
        
        # await self.on_start()   # fetch user list, send features and database operations, etc.

        # asyncio.create_task(self.send_heartbeat())
        # # todo: refresh
        # # todo: use scheduler

        # # Start listening
        # while True:
        #     await asyncio.sleep(1)


    @property
    def access_token(self):
        return self._access_token

    @property
    def refresh_token(self):
        return self._refresh_token


    async def handle_received_message(self, message):
        """
        Decode the received message and handle based on its type.
        """
        message_data = json.loads(message)
        message_type = message_data.get("type")
        print("=============handle_received_message=============")
        print(message_data)
        print(message_type)

        if message_type == "msg_up":
           await self.on_msg_up(message_data)
        
        elif message_type == "action":
           await self.on_action(message_data)
        
        elif message_type == "feature_call":
            await self.on_feature_call(message_data)

        else:   # todo: add types (copy_client etc)
            await self.on_unknown_message(message_data)


    # =================== on_xxx, to be override ===================
    async def on_connect(self):
        """
        Called when the agent is connected to the websocket server.
        """
        self.send_service_login()
    
    async def on_start(self):
        """
        Called when the agent is initialized.
        """
        print("Agent started. Override this method to perform initialization tasks.")
        pass


    async def on_msg_up(self, message_data):
        """
        Handle a message from a user.
        """
        print("Message received:", message_data)
        pass

    async def on_action(self, message_data):
        """
        Handle an action from a user.
        """
        print("Action received:", message_data)
        pass

    async def on_feature_call(self, message_data):
        """
        Handle a feature call from a user.
        """
        print("Feature call received:", message_data)
        pass

    async def on_unknown_message(self, message_data):
        """
        Handle an unknown message.
        """
        print("Unknown message received:", message_data)
        pass

    # =================== send_xxx, to be used ===================
    
    async def send_service_login(self):
        message = self._ws_message_builder.service_login(self.service_id, self.access_token)
        print("message", message)
        await self._ws_client.send(message)

    async def send_msg_down(self, channel_id, recipients, subtype, message_content, sender):
        message = self._ws_message_builder.msg_down(self.service_id, channel_id, recipients, subtype, message_content, sender)
        await self._ws_client.send(message)

    async def send_update(self, target_client_id, data):
        message = self._ws_message_builder.update(self.service_id, target_client_id, data)
        print(message)
        await self._ws_client.send(message)

    async def send_update_userlist(self, channel_id, user_list, recipients):
        message = self._ws_message_builder.update_userlist(self.service_id, channel_id, user_list, recipients)
        print("send_update_userlist", message)
        await self._ws_client.send(message)

    async def send_update_channel_info(self, channel_id, channel_data):
        message = self._ws_message_builder.update_channel_info(self.service_id, channel_id, channel_data)
        print(message)
        await self._ws_client.send(message)

    async def send_update_playground(self, channel_id, content, recipients):
        message = self._ws_message_builder.update_playground(self.service_id, channel_id, content, recipients)
        print(message)
        await self._ws_client.send(message)

    async def send_update_features(self, channel_id, feature_data, recipients):
        message = self._ws_message_builder.update_features(self.service_id, channel_id, feature_data, recipients)
        print(message)
        await self._ws_client.send(message)

    async def send_ping(self):
        message = self._ws_message_builder.ping()
        await self._ws_client.send(message)

    async def send_heartbeat(self):
        """
        Send a ping message every 30 seconds and check the response.
        """
        while True:
            await asyncio.sleep(30)
            try:
                await self.send_ping()
            except websockets.exceptions.ConnectionClosed:
                print("Connection closed. Attempting to reconnect...")
                await self.send_heartbeat()
                print("Reconnected!")
                break
            except Exception as e:
                traceback.print_exc()
                print("Error occurred:", e)
                await self.send_heartbeat()
                print("Reconnected!")
                break
            '''response = await self.websocket.recv()
            if not json.loads(response).get("status", False):
                await self.send_service_login()'''