.. _moobius_json_utils:

###################################################################################
moobius.json_utils
###################################################################################

******************************
Module-level functions
******************************

.. _moobius.json_utils.marked_recursive_dataclass:

marked_recursive_dataclass
---------------------------------------------------------------------------------------------------------------------

Recursively converts nested lists, dicts, etc into dataclasses if they have been markd with types._DTYPE and types._DVAL.

* Signature

    * marked_recursive_dataclass(data)

* Parameters

    * data: Data.

* Returns

  * The dataclassed data. Used for JSON loading.
  Used by json_utils.enhanced_json_load.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.json_utils.marked_recursive_undataclass:

marked_recursive_undataclass
---------------------------------------------------------------------------------------------------------------------

Converts data containing dataclasses back into pure dicts, making them with json_utils._DTYPE and json_utils._DVAL..

* Signature

    * marked_recursive_undataclass(data, typemark_dataclasses)

* Parameters

    * data: Dataclassed data.
    
    * typemark_dataclasses: Whether to mark dataclasses in a special way so they are known as such.

* Returns

  * The non-dataclassed data.
  Used by json_utils.enhanced_json_save.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.json_utils.enhanced_json_load:

enhanced_json_load
---------------------------------------------------------------------------------------------------------------------

Loads JSON from the disk,.

* Signature

    * enhanced_json_load(filename)

* Parameters

    * filename: Filename or bytes.

* Returns

  * The possibly-nested datastructure which may have Dataclasses.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.json_utils.enhanced_json_save:

enhanced_json_save
---------------------------------------------------------------------------------------------------------------------

Saves the JSON to the disk and/or a string.

* Signature

    * enhanced_json_save(filename, data, typemark_dataclasses, indent)

* Parameters

    * filename: The filename or file object to save to. None if not saving to any file.
    
    * data: What needs to be saved. Can be a nested datastructure even with embedded dataclasses.
    
    * typemark_dataclasses=True: Save dataclasses as special dicts so that on enhanced_json_load load they are converted back into dataclasses.
    
    * indent=2: The indent to display the text at.

* Returns

  * The data as a JSON string.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.json_utils.recursive_json_load:

recursive_json_load
---------------------------------------------------------------------------------------------------------------------

Loads json files into dicts and lists, including dicts/lists of json filenames. Used for the app configuration.
Strings anywhere in x that have no newlines and end in .json or .JSON will be treated like filenames.
Does not use enhanced_json features..

* Signature

    * recursive_json_load(x)

* Parameters

    * x: Generic input x.

* Returns

  * The modified input.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.json_utils.update_jsonfile:

update_jsonfile
---------------------------------------------------------------------------------------------------------------------

Updates a json file. Uses enhanced_json_load (which makes dataclasses have metadata).

* Signature

    * update_jsonfile(fname, key_path, value)

* Parameters

    * fname: The json file.
    
    * key_path: The path within the datastructure.
    
    * value: The new value.

* Returns

  * The None.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.json_utils.get_config:

get_config
---------------------------------------------------------------------------------------------------------------------

Calculates the configuration in various ways. Config files are automatically generated by quickstart.py which is invoked by running the command "moobius".
This may involve JSON file reading.

* Signature

    * get_config(config, account_config, service_config, db_config, log_config)

* Parameters

    * config=None: The entire config, a string (JSON filepath) or dict.
    
    * account_config=None: The account-sepcific config with secrets, a string (JSON filepath) or dict.
    
    * service_config=None: Service-specific config (the urls, the service id, and the channels).
    
    * db_config=None: Config specific to the Moobius db engine. A list of attributes. This feature is an independent feature to the Platform.
    
    * log_config=None: Config specific to logging. This feature is an independent feature to the Platform.

* Returns

  * The config as a dict.
    Where to save the new service id as [json filename, datastructure_path], if there is a JSON file to save to.

* Raises

  * (this function does not raise any notable errors)



**********************
Internals
**********************
.. toctree::
   :maxdepth: 2

   moobius.json_utils_internal_attrs <moobius.json_utils_internal_attrs>
