.. _moobius_core_sdk:

###################################################################################
moobius.core.sdk
###################################################################################

******************************
Module-level functions
******************************

(No module-level functions)

************************************
Class Moobius
************************************

<no class docstring>

.. _moobius.core.sdk.Moobius.true_channel_list:

Moobius.true_channel_list
---------------------------------------------------------------------------------------------------------------------

Gets the list of channels the self will end up bound to. Only used if self.service_mode.

* Signature

    * Moobius.true_channel_list(self)

* Parameters

    * (this class constructor accepts no arguments)

* Returns

  * The channel id list.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.create_new_service:

Moobius.create_new_service
---------------------------------------------------------------------------------------------------------------------

Creates a new service and sets self.client_id to it..

* Signature

    * Moobius.create_new_service(self, description)

* Parameters

    * description='Generated by MoobiusService': N optional description.

* Returns

  * The service_id.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.start:

Moobius.start
---------------------------------------------------------------------------------------------------------------------

Starts the service and calls start() fns are called with wand.run. There are 6 steps:
  1. Authenticate.
  2. Connect to the websocket server.
  3. Bind the service to the channels, if a service. If there is no service_id in the config file, create a new service and update the config file.
  4. Start the scheduler and run refresh(), authenticate(), and send_heartbeat() periodically.
  5. Call the on_start() callback (override this method to perform your own initialization tasks).
  6. Start listening to the websocket and the Wand.

* Signature

    * Moobius.start(self)

* Parameters

    * (this class constructor accepts no arguments)

* Returns

  * The None.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.user_join_service_channels:

Moobius.user_join_service_channels
---------------------------------------------------------------------------------------------------------------------

Joins service channels given a service config dict or JSON filename (use in user mode).

* Signature

    * Moobius.user_join_service_channels(self)

* Parameters

    * (this class constructor accepts no arguments)

* Returns

  * The None.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.fetch_service_id_each_channel:

Moobius.fetch_service_id_each_channel
---------------------------------------------------------------------------------------------------------------------

* Signature

    * Moobius.fetch_service_id_each_channel(self)

* Parameters

    * (this class constructor accepts no arguments)

* Returns

  * The  dict describing which service_id each channel_id is bound to. 
  Channels can only be bound to a single service.
  Channels not bound to any service will not be in the dict.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.fetch_bound_channels:

Moobius.fetch_bound_channels
---------------------------------------------------------------------------------------------------------------------

* Signature

    * Moobius.fetch_bound_channels(self)

* Parameters

    * (this class constructor accepts no arguments)

* Returns

  * The  list of channels that are bound to this service.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.fetch_characters:

Moobius.fetch_characters
---------------------------------------------------------------------------------------------------------------------

* Signature

    * Moobius.fetch_characters(self, channel_id)

* Parameters

    * channel_id: Channel id.

* Returns

  * The  list (of Character objects).
  
  This list includes:
    Real members (ids for a particular user-channel combination) who joined the channel with the given channel_id.
    Agent characters that have been created by this service; agent characters are not bound to any channel.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.send_message:

Moobius.send_message
---------------------------------------------------------------------------------------------------------------------

Sends a message down (or up if in user-mode). This function is very flexible.

* Signature

    * Moobius.send_message(self, message, channel_id, sender, recipients, subtype, len_limit, file_display_name, context)

* Parameters

    * message: The message to send.
        If a string, the message will be a text message unless subtype is set.
          If not a text message, the string must either be a local file_path or an http(s) file_path.
        If a MessageBody or dict, the message sent will depend on it's fields/attributes as well as the overrides specified.
        If a pathlib.Path, will be a file/audio/image message by default.
    
    * channel_id=None: The channel ids, if None message must be a MessageBody with the channel_id.
        Overrides message if not None.
    
    * sender=None: The character/user who's avatar appears to "speak" this message.
        Overrides message if not None.
    
    * recipients=None: List of character_ids.
        Overrides message if not None.
    
    * subtype=None: Can be set to types.TEXT, types.IMAGE, types.AUDIO, types.FILE, or types.CARD
        If None, the subtype will be inferred.
    
    * len_limit=None: Limit the length of large text messages.
    
    * file_display_name=None: The name shown for downloadable files can be set to a value different than the filename.
        Sets the subtype to "types.FILE" if subtype is not specified.
    
    * context=None: Optional metadata.

* Returns

  * The None.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.send:

Moobius.send
---------------------------------------------------------------------------------------------------------------------

Sends any kind of payload to the websocket. Example payload types:
  message_down, update, update_characters, update_canvas, update_buttons, update_style, and heartbeat.
Rarely used except internally, but provides the most flexibility for those special occasions.

* Signature

    * Moobius.send(self, payload_type, payload_body)

* Parameters

    * payload_type: The type of the payload.
    
    * payload_body: The body of the payload.
        Strings will be converted into a Payload object.

* Returns

  * The None.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.create_channel:

Moobius.create_channel
---------------------------------------------------------------------------------------------------------------------

Creates a channel.
By default bind is True, which means the service connects itself to the channel.

* Signature

    * Moobius.create_channel(self, channel_name, channel_desc, bind)

* Parameters

    * channel_name: Channel name.
    
    * channel_desc: The channel description.
    
    * bind=True: Whether to bind to the new channel.

* Returns

  * The channel id.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.send_canvas:

Moobius.send_canvas
---------------------------------------------------------------------------------------------------------------------

Updates the canvas.

* Signature

    * Moobius.send_canvas(self, canvas_items, channel_id, recipients)

* Parameters

    * canvas_items: List of CanvasItems (which have text and/or images).
    
    * channel_id: A channel_id.
    
    * recipients: The recipients.

* Returns

  * The message.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.send_heartbeat:

Moobius.send_heartbeat
---------------------------------------------------------------------------------------------------------------------

Sends a heartbeat to the server.

* Signature

    * Moobius.send_heartbeat(self)

* Parameters

    * (this class constructor accepts no arguments)

* Returns

  * The None.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.send_refresh:

Moobius.send_refresh
---------------------------------------------------------------------------------------------------------------------

Sends a refresh.

* Signature

    * Moobius.send_refresh(self, channel_id)

* Parameters

    * channel_id: Channel_id.

* Returns

  * The message sent. A user function.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.do_member_sync:

Moobius.do_member_sync
---------------------------------------------------------------------------------------------------------------------

Syncs a member..  This is the most common way to send buttons, etc.

* Signature

    * Moobius.do_member_sync(self, channel_id, member_id)

* Parameters

    * channel_id: Channel_id.
    
    * member_id: Member_id.

* Returns

  * The None.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.on_channel_checkin:

Moobius.on_channel_checkin
---------------------------------------------------------------------------------------------------------------------

Sends a refresh request "from" each user in this channel, which will refresh thier views..

* Signature

    * Moobius.on_channel_checkin(self, channel_id)

* Parameters

    * channel_id: Channel id.

* Returns

  * The None.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.refresh_authentication:

Moobius.refresh_authentication
---------------------------------------------------------------------------------------------------------------------

Refreshes the access token.

* Signature

    * Moobius.refresh_authentication(self)

* Parameters

    * (this class constructor accepts no arguments)

* Returns

  * The new token.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.authenticate:

Moobius.authenticate
---------------------------------------------------------------------------------------------------------------------

Authenticates using self.username andself.password. Needs to be called before any other API calls.

* Signature

    * Moobius.authenticate(self)

* Parameters

    * (this class constructor accepts no arguments)

* Returns

  * (the access token, the refresh token).
  Raises an Exception if doesn't receive a valid response.
  Like most GET and POST functions it will raise any errors thrown by the http API.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.sign_up:

Moobius.sign_up
---------------------------------------------------------------------------------------------------------------------

Signs up.

* Signature

    * Moobius.sign_up(self)

* Parameters

    * (this class constructor accepts no arguments)

* Returns

  * (the access token, the refresh token).

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.sign_out:

Moobius.sign_out
---------------------------------------------------------------------------------------------------------------------

Signs out using the access token obtained from signing in.

* Signature

    * Moobius.sign_out(self)

* Parameters

    * (this class constructor accepts no arguments)

* Returns

  * The None.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.update_current_user:

Moobius.update_current_user
---------------------------------------------------------------------------------------------------------------------

Updates the user info. Used by user mode.

* Signature

    * Moobius.update_current_user(self, avatar, description, name)

* Parameters

    * avatar: Link to image or local file_path to upload.
    
    * description: Of the user.
    
    * name: The name that shows in chat.

* Returns

  * The None.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.update_agent:

Moobius.update_agent
---------------------------------------------------------------------------------------------------------------------

Updates the characters name, avatar, etc for a FAKE user, for real users use update_current_user. Fills in: the id of this service.

* Signature

    * Moobius.update_agent(self, agent_id, avatar, description, name)

* Parameters

    * agent_id: Who to update. Can also be a Character object. Cannot be a list.
    
    * avatar: A link to user's image or a local file_path to upload.
    
    * description: The description of user.
    
    * name: The name that will show in chat.

* Returns

  * The Data about the user as a dict.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.update_channel:

Moobius.update_channel
---------------------------------------------------------------------------------------------------------------------

Updates the name and desc of a channel.

* Signature

    * Moobius.update_channel(self, channel_id, channel_name, channel_desc)

* Parameters

    * channel_id: Which channel to update.
    
    * channel_name: The new channel name.
    
    * channel_desc: The new channel description.

* Returns

  * The None.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.bind_service_to_channel:

Moobius.bind_service_to_channel
---------------------------------------------------------------------------------------------------------------------

Binds a service to a channel.
This function is unusual in that it. Fills in: the id of this service.

* Signature

    * Moobius.bind_service_to_channel(self, channel_id)

* Parameters

    * channel_id: Channel IDs.

* Returns

  * Whether it was sucessful rather than raising errors if it fails.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.unbind_service_from_channel:

Moobius.unbind_service_from_channel
---------------------------------------------------------------------------------------------------------------------

Unbinds a service to a channel. Fills in: the id of this service.

* Signature

    * Moobius.unbind_service_from_channel(self, channel_id)

* Parameters

    * channel_id: Channel IDs.

* Returns

  * The None.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.create_agent:

Moobius.create_agent
---------------------------------------------------------------------------------------------------------------------

Creates a character with a given name, avatar, and description.
The created user will be bound to the given service. Fills in: the id of this service.

* Signature

    * Moobius.create_agent(self, name, avatar, description)

* Parameters

    * name: The name of the user.
    
    * avatar=None: The image URL of the user's picture OR a local file path.
    
    * description='No description': The description of the user.

* Returns

  * The  Character object representing the created user.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.fetch_popular_channels:

Moobius.fetch_popular_channels
---------------------------------------------------------------------------------------------------------------------

Fetches the popular channels,.

* Signature

    * Moobius.fetch_popular_channels(self)

* Parameters

    * (this class constructor accepts no arguments)

* Returns

  * The  list of channel_id strings.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.fetch_channel_list:

Moobius.fetch_channel_list
---------------------------------------------------------------------------------------------------------------------

Fetches all? channels,.

* Signature

    * Moobius.fetch_channel_list(self)

* Parameters

    * (this class constructor accepts no arguments)

* Returns

  * The  list of channel_id strings.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.fetch_member_ids:

Moobius.fetch_member_ids
---------------------------------------------------------------------------------------------------------------------

Fetches the member ids of a channel which coorespond to real users. Fills in: the id of this service.

* Signature

    * Moobius.fetch_member_ids(self, channel_id, raise_empty_list_err)

* Parameters

    * channel_id: The channel ID.
    
    * raise_empty_list_err=False: Raises an Exception if the list is empty.

* Returns

  * The  list of character_id strings.

* Raises

  * An Exception (empty list) if raise_empty_list_err is True and the list is empty.

.. _moobius.core.sdk.Moobius.fetch_character_profile:

Moobius.fetch_character_profile
---------------------------------------------------------------------------------------------------------------------

* Signature

    * Moobius.fetch_character_profile(self, character_id)

* Parameters

    * character_id: String-valued (or list-valued) character_id.

* Returns

  * The  Character object (or list therof),
  It works for both member_ids and agent_ids.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.fetch_service_id_list:

Moobius.fetch_service_id_list
---------------------------------------------------------------------------------------------------------------------

* Signature

    * Moobius.fetch_service_id_list(self)

* Parameters

    * (this class constructor accepts no arguments)

* Returns

  * The  list of service_id strings of the user.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.fetch_agents:

Moobius.fetch_agents
---------------------------------------------------------------------------------------------------------------------

Fills in: the id of this service.

* Signature

    * Moobius.fetch_agents(self)

* Parameters

    * (this class constructor accepts no arguments)

* Returns

  * The  list of non-user Character objects bound to this service.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.fetch_message_history:

Moobius.fetch_message_history
---------------------------------------------------------------------------------------------------------------------

Returns the message chat history.

* Signature

    * Moobius.fetch_message_history(self, channel_id, limit, before)

* Parameters

    * channel_id: Channel with the messages inside of it.
    
    * limit=1024: Max number of messages to return (messages further back in time, if any, will not be returned).
    
    * before='null': Only return messages older than this.

* Returns

  * The  list of dicts.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.upload:

Moobius.upload
---------------------------------------------------------------------------------------------------------------------

Uploads the file at local path file_path to the Moobius server. Automatically calculates the upload URL and upload fields.

* Signature

    * Moobius.upload(self, file_path)

* Parameters

    * file_path: File_path.

* Returns

  * The uploaded URL. Raises an Exception if the upload fails.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.download:

Moobius.download
---------------------------------------------------------------------------------------------------------------------

Downloads a file from a url or other source to a local filename, automatically creating dirs if need be.

* Signature

    * Moobius.download(self, source, file_path, auto_dir, overwrite, bytes, headers)

* Parameters

    * source: The url to download the file from.
    
    * file_path=None: The file_path to download to.
        None will create a file based on the timestamp + random numbers.
        If no extension is specified, will infer the extension from the url if one exists.
    
    * auto_dir=None: If no file_path is specified, a folder must be choosen.
        Defaults to './downloads'.
    
    * overwrite=True: Allow overwriting pre-existing files. If False, will raise an Exception on name collision.
    
    * bytes=False: If True, will return bytes instead of saving a file.
    
    * headers=None: Optional headers. Use these for downloads that require auth.
        Can set to "self" to use the same auth headers that this instance is using.

* Returns

  * The full filepath if bytes if false, otherwise the file's content bytes if bytes=True.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.create_channel_group:

Moobius.create_channel_group
---------------------------------------------------------------------------------------------------------------------

Creates a channel group.

* Signature

    * Moobius.create_channel_group(self, channel_id, group_name, members)

* Parameters

    * channel_id: The id of the group leader?.
    
    * group_name: What to call it.
    
    * members: A list of character_id strings that will be inside the group.

* Returns

  * The group_id string.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.create_service_group:

Moobius.create_service_group
---------------------------------------------------------------------------------------------------------------------

Creates a group containing the list of characters_ids and returns this Group object.
This group can then be used in send_message_down payloads.

* Signature

    * Moobius.create_service_group(self, members)

* Parameters

    * members: A list of character_id strings or Characters that will be inside the group.

* Returns

  * The  Group object.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.character_ids_of_channel_group:

Moobius.character_ids_of_channel_group
---------------------------------------------------------------------------------------------------------------------

Gets a list of character ids belonging to a channel group.
Websocket payloads contain these channel_groups which are shorthand for a list of characters.

* Signature

    * Moobius.character_ids_of_channel_group(self, sender_id, channel_id, group_id)

* Parameters

    * sender_id: The message's sender.
    
    * channel_id: The message specified that it was sent in this channel.
    
    * group_id: The messages recipients.

* Returns

  * The character_id list.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.character_ids_of_service_group:

Moobius.character_ids_of_service_group
---------------------------------------------------------------------------------------------------------------------

* Signature

    * Moobius.character_ids_of_service_group(self, group_id)

* Parameters

    * group_id: Group_id.

* Returns

  * The  list of character ids belonging to a service group.
  Note that the 'recipients' in 'on message up' might be None:
    To avoid requiring checks for None this function will return an empty list given Falsey inputs or Falsey string literals.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.update_channel_group:

Moobius.update_channel_group
---------------------------------------------------------------------------------------------------------------------

Updates a channel group.

* Signature

    * Moobius.update_channel_group(self, channel_id, group_id, members)

* Parameters

    * channel_id: The id of the group leader?.
    
    * group_id: What to call it.
    
    * members: A list of character_id strings that will be inside the group.

* Returns

  * The None.

* Raises

  * An Exception because it is unused, unimplemented, and may be removed.

.. _moobius.core.sdk.Moobius.update_temp_channel_group:

Moobius.update_temp_channel_group
---------------------------------------------------------------------------------------------------------------------

Updates a channel TEMP group.

* Signature

    * Moobius.update_temp_channel_group(self, channel_id, members)

* Parameters

    * channel_id: The id of the group leader?.
    
    * members: A list of character_id strings that will be inside the group.

* Returns

  * The None.

* Raises

  * An Exception because it is unused, unimplemented, and may be removed.

.. _moobius.core.sdk.Moobius.fetch_channel_temp_group:

Moobius.fetch_channel_temp_group
---------------------------------------------------------------------------------------------------------------------

Like fetch_channel_group_list but for TEMP groups.. Fills in: the id of this service.

* Signature

    * Moobius.fetch_channel_temp_group(self, channel_id)

* Parameters

    * channel_id: Channel_id.

* Returns

  * The list of groups.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.fetch_channel_group_list:

Moobius.fetch_channel_group_list
---------------------------------------------------------------------------------------------------------------------

Similar to fetch_channel_group_dict.. Fills in: the id of this service.

* Signature

    * Moobius.fetch_channel_group_list(self, channel_id)

* Parameters

    * channel_id: Channel_id.

* Returns

  * The raw data.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.fetch_user_from_group:

Moobius.fetch_user_from_group
---------------------------------------------------------------------------------------------------------------------

Not yet implemented!
Fetches the user profile of a user from a group.

* Signature

    * Moobius.fetch_user_from_group(self, user_id, channel_id, group_id)

* Parameters

    * user_id: The user ID.
    
    * channel_id: The channel ID. (TODO: of what?).
    
    * group_id: The group ID.

* Returns

  * The user profile Character object.

* Raises

  * An Exception because it is unused, unimplemented, and may be removed.

.. _moobius.core.sdk.Moobius.fetch_target_group:

Moobius.fetch_target_group
---------------------------------------------------------------------------------------------------------------------

Not yet implemented!
Fetches info about the group.

* Signature

    * Moobius.fetch_target_group(self, user_id, channel_id, group_id)

* Parameters

    * user_id: The user id of the user bieng fetched (is this needed?).
    
    * channel_id: The channel_id of the channel bieng fetched.
    
    * group_id: Which group to fetch.

* Returns

  * The data-dict data.

* Raises

  * An Exception because it is unused, unimplemented, and may be removed.

.. _moobius.core.sdk.Moobius.send_user_login:

Moobius.send_user_login
---------------------------------------------------------------------------------------------------------------------

Logs-in a user.
Every 2h AWS will force-disconnect, so it is a good idea to send this on connect. Fills in: the https token the service has for authentication; set to False.

* Signature

    * Moobius.send_user_login(self)

* Parameters

    * (this class constructor accepts no arguments)

* Returns

  * The message as a dict.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.send_service_login:

Moobius.send_service_login
---------------------------------------------------------------------------------------------------------------------

Logs in. Much like the HTTP api, this needs to be sent before any other messages. Fills in: the id of this service; the https token the service has for authentication; set to False.

* Signature

    * Moobius.send_service_login(self)

* Parameters

    * (this class constructor accepts no arguments)

* Returns

  * The message as a dict.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.send_update:

Moobius.send_update
---------------------------------------------------------------------------------------------------------------------

A generic update function that is rarely used. Fills in: the id of this service; set to False.

* Signature

    * Moobius.send_update(self, data, target_client_id)

* Parameters

    * data: The content of the update.
    
    * target_client_id: The target client id (TODO: not currently used).

* Returns

  * The message as a dict.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.send_characters:

Moobius.send_characters
---------------------------------------------------------------------------------------------------------------------

Updates the characters that the recipients see. Fills in: the id of this service; set to False.

* Signature

    * Moobius.send_characters(self, characters, channel_id, recipients)

* Parameters

    * characters: The group id to represent the characters who are updated.
    
    * channel_id: The channel id.
    
    * recipients: The group id to send to.

* Returns

  * The message as a dict.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.send_buttons:

Moobius.send_buttons
---------------------------------------------------------------------------------------------------------------------

Updates the buttons that the recipients see. Fills in: the id of this service; set to False.

* Signature

    * Moobius.send_buttons(self, buttons, channel_id, recipients)

* Parameters

    * buttons: The buttons list to be updated.
    
    * channel_id: The channel id.
    
    * recipients: The group id to send to.

* Returns

  * The message as a dict.

* Raises

  * (this function does not raise any notable errors)

* Example

    >>> continue_button =
      >>>   {"button_name": "Continue Playing", "button_id": "play",
      >>>    "button_name": "Continue Playing", "new_window": False,
      >>>    "arguments": []}
      >>> ws_client.update_buttons("service_id", "channel_id", [continue_button], ["user1", "user2"])

.. _moobius.core.sdk.Moobius.send_menu:

Moobius.send_menu
---------------------------------------------------------------------------------------------------------------------

Updates the right-click menu that the recipients can open on various messages. Fills in: the id of this service; set to False.

* Signature

    * Moobius.send_menu(self, menu_items, channel_id, recipients)

* Parameters

    * menu_items: List of MenuItem dataclasses.
    
    * channel_id: The channel id.
    
    * recipients: The group id to send the changes to.

* Returns

  * The message as a dict.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.send_style:

Moobius.send_style
---------------------------------------------------------------------------------------------------------------------

Updates the style (whether the canvas is expanded, other look-and-feel aspects) that the recipients see. Fills in: the id of this service; set to False.

* Signature

    * Moobius.send_style(self, style_items, channel_id, recipients)

* Parameters

    * style_items: The style content to be updated. Dicts are converted into 1-elemnt lists.
    
    * channel_id: The channel id.
    
    * recipients: The group id to send to.

* Returns

  * The message as a dict.

* Raises

  * (this function does not raise any notable errors)

* Example

    >>> style_items = [
        >>>   {
        >>>     "widget": "channel",
        >>>     "display": "invisible",
        >>>   },
        >>>   {
        >>>     "widget": "button",
        >>>     "display": "highlight",
        >>>     "button_hook": {
        >>>       "button_id": "button_id",
        >>>       "button_name": "done",
        >>>       "arguments": []
        >>>       },
        >>>     "text": "<h1>Start from here.</h1><p>This is a Button, which most channels have</p>"
        >>>   }]
        >>> ws_client.update_style("service_id", "channel_id", style_items, ["user1", "user2"])

.. _moobius.core.sdk.Moobius.send_join_channel:

Moobius.send_join_channel
---------------------------------------------------------------------------------------------------------------------

A user joins the channel with channel_id, unless dry_run is True.. Fills in: the id of this service when in user mode, which is a user id; set to False.

* Signature

    * Moobius.send_join_channel(self, channel_id)

* Parameters

    * channel_id: The channel_id.

* Returns

  * The message sent.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.send_leave_channel:

Moobius.send_leave_channel
---------------------------------------------------------------------------------------------------------------------

A user leaves the channel with channel_id, unless dry_run is True.. Fills in: the id of this service when in user mode, which is a user id; set to False.

* Signature

    * Moobius.send_leave_channel(self, channel_id)

* Parameters

    * channel_id: The channel_id.

* Returns

  * The message sent.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.send_button_click:

Moobius.send_button_click
---------------------------------------------------------------------------------------------------------------------

Sends a button click as a user. Fills in: the id of this service when in user mode, which is a user id; set to False.

* Signature

    * Moobius.send_button_click(self, button_id, bottom_button_id, button_args, channel_id)

* Parameters

    * button_id: The button's ID.
    
    * bottom_button_id: The bottom button, set to "confirm" if there is no bottom button.
    
    * button_args: What arguments (if any) were selected on the button (use an empty list of there are none).
    
    * channel_id: The id of the channel the user pressed the button in.

* Returns

  * The message sent as a dict.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.send_menu_item_click:

Moobius.send_menu_item_click
---------------------------------------------------------------------------------------------------------------------

Sends a menu item click as a user. Fills in: the id of this service when in user mode, which is a user id; set to False.

* Signature

    * Moobius.send_menu_item_click(self, menu_item_id, bottom_button_id, button_args, the_message, channel_id)

* Parameters

    * menu_item_id: The menu item's ID.
    
    * bottom_button_id: The bottom button, set to "confirm" if there is no bottom button.
    
    * button_args: What arguments (if any) were selected on the menu item's dialog (use an empty list of there are none).
    
    * the_message: Can be a string-valued message_id, or a full message body. If a full message the subtype and content will be filled in.
    
    * channel_id: The id of the channel the user pressed the button in.

* Returns

  * The message sent as a dict.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.listen_loop:

Moobius.listen_loop
---------------------------------------------------------------------------------------------------------------------

Listens to the wand in an infinite loop, polling self.queue (which is an aioprocessing.AioQueue).
This allows the wand to send "spells" (messages) to the services at any time.

* Signature

    * Moobius.listen_loop(self)

* Parameters

    * (this class constructor accepts no arguments)

* Returns

  * The Never.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.handle_received_payload:

Moobius.handle_received_payload
---------------------------------------------------------------------------------------------------------------------

Decodes the received websocket payload JSON and calls the handler based on p['type'],. 
Example methods called:
  on_message_up(), on_action(), on_button_click(), on_copy_client(), on_unknown_payload()

Example use-case:
  >>> self.ws_client = WSClient(ws_server_uri, on_connect=self.send_service_login, handle=self.handle_received_payload).

* Signature

    * Moobius.handle_received_payload(self, payload)

* Parameters

    * payload: Payload string.

* Returns

  * The None.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.on_action:

Moobius.on_action
---------------------------------------------------------------------------------------------------------------------

Calls the corresponding method to handle different subtypes of action.
This callback is rarely overriden; it is more common to override the other callbacks that the calls.
Example methods called:
  on_button_click(), on_join().

* Signature

    * Moobius.on_action(self, action_data)

* Parameters

    * action_data: Action data (as a dict) from a user.

* Returns

  * The None.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.on_update:

Moobius.on_update
---------------------------------------------------------------------------------------------------------------------

Dispatches it to one of various callbacks. Use for user mode.
It is recommended to overload the invididual callbacks instead of this function.

* Signature

    * Moobius.on_update(self, update)

* Parameters

    * update: N Update object from the socket.

* Returns

  * The None.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.on_start:

Moobius.on_start
---------------------------------------------------------------------------------------------------------------------

Called when the service is initialized.

* Signature

    * Moobius.on_start(self)

* Parameters

    * (this class constructor accepts no arguments)

* Returns

  * The None.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.on_channel_init:

Moobius.on_channel_init
---------------------------------------------------------------------------------------------------------------------

Called once per channel on startup.. 
By default, if the db has been set, a MoobiusStorage is created in self.channel_storages.
Also does a channel sync by default.

* Signature

    * Moobius.on_channel_init(self, channel_id)

* Parameters

    * channel_id: Channel ID.

* Returns

  * The None.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.on_spell:

Moobius.on_spell
---------------------------------------------------------------------------------------------------------------------

Called when a "spell" from the wand is received, which can be any object but is often a string..

* Signature

    * Moobius.on_spell(self, obj)

* Parameters

    * obj: The wand sent this process.

* Returns

  * The None.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.on_message_up:

Moobius.on_message_up
---------------------------------------------------------------------------------------------------------------------

Example MessageBody object:
>>>  moobius.MessageBody(subtype="text", channel_id=<channel id>, content=MessageContent(...), timestamp=1707254706635,
>>>                      recipients=[<user id 1>, <user id 2>], sender=<user id>, message_id=<message-id>,
>>>                      context={'group_id': <group-id>, 'channel_type': 'ccs'}).

* Signature

    * Moobius.on_message_up(self, message)

* Parameters

    * message: A message from a user.

* Returns

  * The None.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.on_copy_client:

Moobius.on_copy_client
---------------------------------------------------------------------------------------------------------------------

Example Copy object:
>>> moobius.Copy(request_id=<id>, origin_type=message_down, status=True, context={'message': 'Message received'}).

* Signature

    * Moobius.on_copy_client(self, copy)

* Parameters

    * copy: A "Copy" request from the user.

* Returns

  * The None.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.on_refresh:

Moobius.on_refresh
---------------------------------------------------------------------------------------------------------------------

* Signature

    * Moobius.on_refresh(self, action)

* Parameters

    * action: A "Copy" request from the user.

* Returns

  * The None.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.on_join:

Moobius.on_join
---------------------------------------------------------------------------------------------------------------------

This callback happens when the user joins a channel.. 
Commonly used to inform everyone about this new user and update everyone's character list.

* Signature

    * Moobius.on_join(self, action)

* Parameters

    * action: Channel and member id.

* Returns

  * The None.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.on_leave:

Moobius.on_leave
---------------------------------------------------------------------------------------------------------------------

Called when the user leaves a channel.. 
Commonly used to update everyone's character list.

* Signature

    * Moobius.on_leave(self, action)

* Parameters

    * action: Channel and member id.

* Returns

  * The None.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.on_button_click:

Moobius.on_button_click
---------------------------------------------------------------------------------------------------------------------

Handles a button click from a user.. 
Example ButtonClick object:
>>> moobius.ButtonClick(button_id="the_big_red_button", channel_id=<channel id>, sender=<user id>, components=[], context={}).

* Signature

    * Moobius.on_button_click(self, action)

* Parameters

    * action: User's ButtonClick.

* Returns

  * The None.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.on_menu_item_click:

Moobius.on_menu_item_click
---------------------------------------------------------------------------------------------------------------------

Handles a context menu right click from a user.. 
Example MenuItemClick object:
>>> MenuItemClick(item_id=1, message_id=<id>, message_subtypes=text, message_content={'text': 'Click on this message.'}, channel_id=<channel_id>, context={}, recipients=[]).

* Signature

    * Moobius.on_menu_item_click(self, action)

* Parameters

    * action: User's MenuItemClick.

* Returns

  * The None.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.on_unknown_payload:

Moobius.on_unknown_payload
---------------------------------------------------------------------------------------------------------------------

A catch-all for handling unknown payloads..

* Signature

    * Moobius.on_unknown_payload(self, payload_data)

* Parameters

    * payload_data: Payload-as-dict that has not been recognized by the other handlers and may not have a format listed in types.

* Returns

  * The None.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.on_message_down:

Moobius.on_message_down
---------------------------------------------------------------------------------------------------------------------

Callback when the user recieves a message..
Use for user mode.

* Signature

    * Moobius.on_message_down(self, message)

* Parameters

    * message: Service's MessageBody.

* Returns

  * The None.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.on_update_characters:

Moobius.on_update_characters
---------------------------------------------------------------------------------------------------------------------

Callback when the user recieves the character list.. One of the multiple update callbacks. 
Use for user mode.

* Signature

    * Moobius.on_update_characters(self, update)

* Parameters

    * update: Service's Update.

* Returns

  * The None.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.on_update_channel_info:

Moobius.on_update_channel_info
---------------------------------------------------------------------------------------------------------------------

Callback when the user recieves the channel info.. One of the multiple update callbacks. 
Use for user mode.

* Signature

    * Moobius.on_update_channel_info(self, update)

* Parameters

    * update: Service's Update.

* Returns

  * The None.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.on_update_canvas:

Moobius.on_update_canvas
---------------------------------------------------------------------------------------------------------------------

Callback when the user recieves the canvas content.. One of the multiple update callbacks. 
Use for user mode.

* Signature

    * Moobius.on_update_canvas(self, update)

* Parameters

    * update: Service's Update.

* Returns

  * The None.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.on_update_buttons:

Moobius.on_update_buttons
---------------------------------------------------------------------------------------------------------------------

Callback when the user recieves the buttons.. One of the multiple update callbacks. 
Use for user mode.

* Signature

    * Moobius.on_update_buttons(self, update)

* Parameters

    * update: Service's Update.

* Returns

  * The None.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.on_update_style:

Moobius.on_update_style
---------------------------------------------------------------------------------------------------------------------

Callback when the user recieves the style info (look and feel).. One of the multiple update callbacks. 
Use for user mode.

* Signature

    * Moobius.on_update_style(self, update)

* Parameters

    * update: Service's Update.

* Returns

  * The None.

* Raises

  * (this function does not raise any notable errors)

.. _moobius.core.sdk.Moobius.on_update_menu:

Moobius.on_update_menu
---------------------------------------------------------------------------------------------------------------------

Callback when the user recieves the context menu info.. One of the multiple update callbacks. 
Use for user mode.

* Signature

    * Moobius.on_update_menu(self, update)

* Parameters

    * update: Service's Update.

* Returns

  * The None.

* Raises

  * (this function does not raise any notable errors)

Class attributes
--------------------



**********************
Internals
**********************
.. toctree::
   :maxdepth: 2

   moobius.core.sdk_internal_attrs <moobius.core.sdk_internal_attrs>
